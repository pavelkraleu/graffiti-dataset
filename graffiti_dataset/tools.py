import cv2
import glob
import random
import skimage
import numpy as np
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
from graffiti_dataset.dataset import DatasetSample
import folium


def random_background(width, height, background_images_dir):
    """
    Makes image with given size which doesn't contain graffiti

    :param width: Resulting width in pixels
    :param height: Resulting height in pixels
    :param background_images_dir: Directory where to look for images

    """

    negative_images = glob.glob(f'./{background_images_dir}/*')

    random.shuffle(negative_images)

    img = cv2.cvtColor(cv2.imread(negative_images[0]),cv2.COLOR_RGB2BGR)

    if min(img.shape[:2]) < min(width, height):
        # Image is smaller than self.target_size. Scale it up

        resize_ratio = min(width, height) / min(img.shape[:2])

    else:
        # Image is larger than self.target_size. Scale it down a little

        resize_ratio = min(width, height) / min(img.shape[:2])
        resize_ratio = random.uniform(resize_ratio, 1.0)

    img = skimage.transform.rescale(img, resize_ratio, multichannel=True, anti_aliasing=True, mode='constant',
                                    preserve_range=True)

    y_range = img.shape[0] - height
    x_range = img.shape[1] - width

    y_skip = random.randint(0, y_range)
    x_skip = random.randint(0, x_range)

    crop_img = img[y_skip:y_skip + height, x_skip:x_skip + width]

    return crop_img

def draw_main_colors(image_main_colors, output_path):
    """
    Helper function to generate chart describing color clusters

    :param image_main_colors: Array generated by DatasetSample.main_colors()
    :param output_path: Path where to store the chart
    """

    rgb_colors = np.array(image_main_colors)[:, 1]
    y_pos = np.arange(len(rgb_colors))
    color_percentages = np.array(image_main_colors)[:, 0]

    def rgbtohex(rgb_color):
        print(rgb_color)
        return '#%02x%02x%02x' % tuple(rgb_color)

    chart_colors = list(map(rgbtohex, rgb_colors))

    plt.bar(y_pos, color_percentages, align='center', color=chart_colors)
    plt.xticks(y_pos, chart_colors)
    plt.ylabel('% of color in graffiti')
    plt.title('Percentage of colors in graffiti')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(output_path)

    plt.cla()
    plt.clf()

def draw_map(dataset_samples_paths, output_path):
    """
    Generates map from GPS coordinates of the samples

    :param dataset_samples_paths: List of sample Pickle files
    :param output_path: Output path where to store map in HTML
    """

    gps_coordinates = []

    for sample_path in dataset_samples_paths:
        sample = DatasetSample(sample_path)
        gps_coordinates.append([sample.gps_latitude, sample.gps_longitude])

    map = folium.Map(zoom_start=12,location=list(np.mean(gps_coordinates, axis=0)))

    for sample_path in dataset_samples_paths:
        sample = DatasetSample(sample_path)
        folium.Marker([sample.gps_latitude, sample.gps_longitude], popup=sample.sample_id).add_to(map)


    map.save(output_path)

